import unittest

from numpy import array

from newvelles.utils.text import process_content
from newvelles.utils.text import remove_subsets, remove_similar_subsets
from newvelles.utils.text import get_top_words_spacy


TEST_CASES = {
    'Limbic is a package.': ['limbic', 'package'],
    'a random number 111': ['random', 'number'],
    "something I didn't expected to test with l'huillier.":
    ['didnt', 'expected', 'test', 'lhuillier'],
    "l'huillier is a last name a will not change.": ["l'huillier", "change"],
    "didn't will be removed (stopword).": ["removed", 'stopword'],
    '': ['']
}
TERMS_MAPPING = {'dog': 'cat'}
TEST_CASES_TERMS_MAPPING = {'this is a dog': 'this is a cat'}
TEST_SET_CASES = [
    ([[0, 1, 3], [0, 1], [2], [0, 3], [4], [0, 3, 2]], {(0, 1, 2, 3), (4, )}), ([[0]], [[0]]),
    ([], set()), ([[0, 1], [0, 1]], {(0, 1)}),
    ([[0, 1], [1, 2], [2, 4], [3, 4], [9, 8, 7, 6, 5, 4]], {(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)}),
    ([
        array([0, 19]),
        array([1]),
        array([2, 22]),
        array([3, 19]),
        array([4, 17, 22, 36]),
        array([5]),
        array([6]),
        array([7, 11, 19, 46, 321]),
        array([8]),
        array([9]),
        array([
            10, 34, 73, 99, 122, 148, 170, 174, 209, 216, 217, 221, 223, 252, 260, 264, 276, 282,
            301, 309, 310, 311, 330
        ]),
        array([7, 11, 46, 321]),
        array([12]),
        array([13, 18]),
        array([14]),
        array([15]),
        array([16]),
        array([4, 17]),
        array([13, 18, 22]),
        array([0, 3, 7, 19, 321]),
        array([20, 21]),
        array([20, 21]),
        array([2, 4, 18, 22, 37, 38]),
        array([23]),
        array([24, 35]),
        array([25]),
        array([26]),
        array([27]),
        array([28]),
        array([29]),
        array([30]),
        array([31]),
        array([32, 321]),
        array([33]),
        array([10, 34]),
        array([24, 35]),
        array([4, 36]),
        array([22, 37]),
        array([22, 38]),
        array([39]),
        array([40]),
        array([41]),
        array([42]),
        array([43]),
        array([44]),
        array([45]),
        array([7, 11, 46, 321]),
        array([47]),
        array([48]),
        array([49]),
        array([50, 243]),
        array([51, 185, 195, 198, 201, 202]),
        array([52]),
        array([53]),
        array([54, 105, 115, 177, 214, 220]),
        array([55, 120, 139, 151, 344]),
        array([56, 151, 164]),
        array([57]),
        array([58]),
        array([59, 273]),
        array([60, 103, 272, 273]),
        array([61]),
        array([62]),
        array([63]),
        array([64]),
        array([65]),
        array([66]),
        array([67, 72, 170, 174, 276, 301, 330]),
        array([68]),
        array([69]),
        array([70]),
        array([71]),
        array([67, 72, 99, 170, 215, 217, 276, 278, 282, 297, 301]),
        array([10, 73, 209, 217, 260, 267, 311]),
        array([74]),
        array([75]),
        array([76]),
        array([77]),
        array([78]),
        array([79]),
        array([80]),
        array([81]),
        array([82]),
        array([83]),
        array([84]),
        array([85]),
        array([86]),
        array([87]),
        array([88, 381]),
        array([89]),
        array([90]),
        array([91]),
        array([92]),
        array([93]),
        array([94]),
        array([95]),
        array([96]),
        array([97]),
        array([98]),
        array([10, 72, 99, 122, 170, 216, 217, 221, 223, 282, 301, 309, 330]),
        array([100]),
        array([101]),
        array([102]),
        array([60, 103, 272, 273]),
        array([104]),
        array([54, 105, 115, 177, 214, 220]),
        array([106]),
        array([107]),
        array([108]),
        array([109]),
        array([110]),
        array([111, 113]),
        array([112]),
        array([111, 113]),
        array([114, 212]),
        array([54, 105, 115, 177, 214, 220]),
        array([116, 323]),
        array([117]),
        array([118, 159, 165]),
        array([119]),
        array([55, 120, 163, 344]),
        array([121]),
        array([
            10, 99, 122, 148, 170, 174, 193, 215, 216, 217, 221, 223, 252, 260, 264, 282, 301, 311,
            330
        ]),
        array([123]),
        array([124]),
        array([125]),
        array([126]),
        array([127]),
        array([128]),
        array([129]),
        array([130]),
        array([131]),
        array([132]),
        array([133, 316]),
        array([134]),
        array([135]),
        array([136]),
        array([137, 323, 325, 346]),
        array([138]),
        array([55, 139, 344]),
        array([140]),
        array([141, 151, 344]),
        array([142]),
        array([143]),
        array([144]),
        array([145, 196]),
        array([146]),
        array([147, 343]),
        array([10, 122, 148, 221, 252, 260, 282, 301, 309, 311]),
        array([149, 167]),
        array([150, 343, 346, 375]),
        array([55, 56, 141, 151, 344]),
        array([152, 300, 302]),
        array([153]),
        array([154]),
        array([155]),
        array([156]),
        array([157, 318]),
        array([158]),
        array([118, 159, 165]),
        array([160]),
        array([161]),
        array([162]),
        array([120, 163]),
        array([56, 164, 345]),
        array([118, 159, 165, 383]),
        array([166, 300]),
        array([149, 167, 326]),
        array([168]),
        array([169]),
        array([
            10, 67, 72, 99, 122, 170, 174, 193, 215, 216, 217, 221, 223, 233, 252, 260, 276, 282,
            301, 309, 310, 311, 330
        ]),
        array([171]),
        array([172]),
        array([173]),
        array([10, 67, 122, 170, 174, 217, 223, 264, 301, 330]),
        array([175]),
        array([176]),
        array([54, 105, 115, 177, 214, 220]),
        array([178]),
        array([179]),
        array([180]),
        array([181]),
        array([182]),
        array([183]),
        array([184]),
        array([51, 185, 195, 197, 198, 202, 373]),
        array([186]),
        array([187]),
        array([188]),
        array([189]),
        array([190, 193]),
        array([191]),
        array([192]),
        array([122, 170, 190, 193, 215]),
        array([194, 195, 198]),
        array([51, 185, 194, 195, 197, 198, 201, 202]),
        array([145, 196]),
        array([185, 195, 197, 198, 201, 202]),
        array([51, 185, 194, 195, 197, 198, 201, 202]),
        array([199]),
        array([200]),
        array([51, 195, 197, 198, 201, 202]),
        array([51, 185, 195, 197, 198, 201, 202, 373]),
        array([203]),
        array([204]),
        array([205, 215, 233, 249, 278, 282]),
        array([206]),
        array([207]),
        array([208]),
        array([10, 73, 209, 210, 215, 221, 252, 260, 311]),
        array([209, 210]),
        array([211]),
        array([114, 212]),
        array([213]),
        array([54, 105, 115, 177, 214, 220]),
        array([72, 122, 170, 193, 205, 209, 215, 221, 252, 276, 301]),
        array([10, 99, 122, 170, 216, 217, 221, 223, 233, 282, 301, 309, 330]),
        array(
            [10, 72, 73, 99, 122, 170, 174, 216, 217, 221, 223, 276, 278, 282, 301, 309, 311, 330]),
        array([218, 316]),
        array([219, 224]),
        array([54, 105, 115, 177, 214, 220]),
        array([10, 99, 122, 148, 170, 209, 215, 216, 217, 221, 223, 252, 260, 276, 301, 330]),
        array([222]),
        array([10, 99, 122, 170, 174, 216, 217, 221, 223, 233, 276, 278, 282, 301, 310]),
        array([219, 224]),
        array([225]),
        array([226]),
        array([227, 228]),
        array([227, 228, 318]),
        array([229]),
        array([230]),
        array([231]),
        array([232]),
        array([170, 205, 216, 223, 233, 282, 309, 311, 330]),
        array([234]),
        array([235]),
        array([236]),
        array([237, 316]),
        array([238]),
        array([239]),
        array([240]),
        array([241]),
        array([242]),
        array([50, 243]),
        array([244]),
        array([245]),
        array([246]),
        array([247]),
        array([248, 270]),
        array([205, 249, 264]),
        array([250]),
        array([251, 260]),
        array([10, 122, 148, 170, 209, 215, 221, 252, 260, 264, 282, 301, 311]),
        array([253]),
        array([254, 257]),
        array([255]),
        array([256, 271]),
        array([254, 257, 263]),
        array([258]),
        array([259, 270]),
        array([10, 73, 122, 148, 170, 209, 221, 251, 252, 260, 267, 282, 301, 310, 311]),
        array([261]),
        array([262]),
        array([257, 263]),
        array([10, 122, 174, 249, 252, 264, 278, 282, 301, 311]),
        array([265]),
        array([266]),
        array([73, 260, 267, 311]),
        array([268]),
        array([269]),
        array([248, 259, 270]),
        array([256, 271, 275]),
        array([60, 103, 272, 273]),
        array([59, 60, 103, 272, 273, 276, 284, 297, 380]),
        array([274]),
        array([271, 275]),
        array([10, 67, 72, 170, 215, 217, 221, 223, 273, 276, 278, 282, 297, 301, 309]),
        array([277]),
        array([72, 205, 217, 223, 264, 276, 278, 282, 301]),
        array([279]),
        array([280]),
        array([281, 284]),
        array([
            10, 72, 99, 122, 148, 170, 205, 216, 217, 223, 233, 252, 260, 264, 276, 278, 282, 287,
            301, 309, 310, 311
        ]),
        array([283]),
        array([273, 281, 284, 289, 297]),
        array([285]),
        array([286]),
        array([282, 287, 301, 311]),
        array([288]),
        array([284, 289]),
        array([290, 294]),
        array([291]),
        array([292]),
        array([293, 333]),
        array([290, 294]),
        array([295]),
        array([296]),
        array([72, 273, 276, 284, 297]),
        array([298]),
        array([299]),
        array([152, 166, 300, 302, 304]),
        array([
            10, 67, 72, 99, 122, 148, 170, 174, 215, 216, 217, 221, 223, 252, 260, 264, 276, 278,
            282, 287, 301, 304, 309, 310, 311, 330
        ]),
        array([152, 300, 302]),
        array([303]),
        array([300, 301, 304]),
        array([305]),
        array([306]),
        array([307]),
        array([308]),
        array([10, 99, 148, 170, 216, 217, 233, 276, 282, 301, 309, 310, 311]),
        array([10, 170, 223, 260, 282, 301, 309, 310, 311]),
        array([
            10, 73, 122, 148, 170, 209, 217, 233, 252, 260, 264, 267, 282, 287, 301, 309, 310, 311
        ]),
        array([312]),
        array([313]),
        array([314]),
        array([315]),
        array([133, 218, 237, 316]),
        array([317]),
        array([157, 228, 318, 320]),
        array([319]),
        array([318, 320]),
        array([7, 11, 19, 32, 46, 321]),
        array([322]),
        array([116, 137, 323, 346]),
        array([324]),
        array([137, 325, 346]),
        array([167, 326]),
        array([327]),
        array([328]),
        array([329]),
        array([10, 67, 99, 122, 170, 174, 216, 217, 221, 233, 301, 330]),
        array([331]),
        array([332]),
        array([293, 333]),
        array([334]),
        array([335]),
        array([336]),
        array([337]),
        array([338]),
        array([339]),
        array([340]),
        array([341, 382]),
        array([342]),
        array([147, 150, 343, 375]),
        array([55, 120, 139, 141, 151, 344]),
        array([164, 345]),
        array([137, 150, 323, 325, 346]),
        array([347]),
        array([348]),
        array([349]),
        array([350]),
        array([351]),
        array([352]),
        array([353]),
        array([354]),
        array([355]),
        array([356]),
        array([357, 361]),
        array([358]),
        array([359]),
        array([360]),
        array([357, 361]),
        array([362]),
        array([363]),
        array([364]),
        array([365]),
        array([366]),
        array([367]),
        array([368]),
        array([369]),
        array([370]),
        array([371]),
        array([372]),
        array([185, 202, 373]),
        array([374]),
        array([150, 343, 375]),
        array([376]),
        array([377]),
        array([378]),
        array([379]),
        array([273, 380]),
        array([88, 381]),
        array([341, 382]),
        array([165, 383])
    ],
     {(63, ), (182, ), (356, ), (127, ), (246, ), (365, ), (191, ), (0, 3, 7, 11, 19, 32, 46, 321),
      (255, ), (374, ), (319, ), (84, ), (29, ), (93, ), (102, ), (47, ), (285, ), (230, ), (349, ),
      (175, ), (239, ), (358, ), (184, ), (303, ), (24, 35), (367, ), (312, ), (376, ), (77, ),
      (116, 137, 147, 150, 323, 325, 343, 346, 375), (86, ), (31, ), (95, ), (40, ), (104, ),
      (49, ), (342, ), (168, ), (232, ), (351, ), (296, ), (241, ), (360, ), (305, ),
      (2, 4, 13, 17, 18, 22, 36, 37, 38), (250, ), (369, ), (314, ), (6, ), (219, 224), (378, ),
      (15, ), (79, ), (143, ), (207, ), (33, ), (97, ), (42, ), (161, ), (280, ), (106, ), (225, ),
      (335, ), (254, 257, 263), (234, ), (353, ),
      (179, ), (298, ), (362, ), (307, ), (371, ), (8, ), (54, 105, 115, 177, 214, 220), (136, ),
      (81, ), (200, ), (26, ), (90, ), (328, ), (154, ), (44, ), (337, ), (108, ), (172, ), (291, ),
      (236, ), (355, ), (364, ), (1, ), (65, ), (50, 243), (129, ), (74, ), (138, ), (83, ), (28, ),
      (266, ), (92, ), (211, ), (156, ), (101, ), (339, ), (229, ), (348, ), (248, 259, 270),
      (341, 382), (58, ), (118, 159, 165, 383), (20, 21), (186, ), (12, ), (131, ), (76, ), (140, ),
      (85, ), (204, ), (30, ), (268, ), (94, ), (213, ), (332, ), (158, ), (277, ),
      (55, 56, 120, 139, 141, 151, 163, 164, 344, 345), (222, ), (286, ), (149, 167, 326), (350, ),
      (295, ), (359, ), (5, ), (124, ), (69, ), (188, ), (14, ), (78, ), (23, ), (142, ), (261, ),
      (87, ), (206, ), (334, ), (160, ), (279, ), (288, ), (352, ), (53, ),
      (117, ), (62, ), (181, ), (126, ), (245, ), (71, ), (16, ), (135, ), (80, ), (199, ), (25, ),
      (144, ), (89, ), (208, ), (327, ), (153, ), (336, ), (145, 196), (110, ), (119, ), (238, ),
      (64, ), (183, ), (9, ), (128, ), (247, ), (366, ), (192, ), (82, ), (146, ), (265, ), (329, ),
      (274, ), (338, ), (39, ), (48, ), (112, ), (231, ), (57, ), (176, ), (121, ), (240, ), (66, ),
      (51, 185, 194, 195, 197, 198, 201, 202, 373),
      (10, 34, 59, 60, 67, 72, 73, 99, 103, 122, 148, 152, 166, 170, 174, 190, 193, 205, 209, 210,
       215, 216, 217, 221, 223, 233, 249, 251, 252, 260, 264, 267, 272, 273, 276, 278, 281, 282,
       284, 287, 289, 297, 300, 301, 302, 304, 309, 310, 311, 330, 380), (130, ), (75, ), (368, ),
      (313, ), (258, ), (377, ), (203, ), (322, ), (331, ), (340, ), (357, 361), (96, ), (41, ),
      (111, 113), (169, ), (178, ), (123, ), (242, ), (68, ), (187, ), (306, ), (132, ), (114, 212),
      (370, ), (293, 333), (315, ), (88, 381), (379, ), (324, ), (269, ), (133, 218, 237, 316),
      (157, 227, 228, 318, 320), (290, 294), (98, ), (43, ), (162, ), (107, ), (226, ), (52, ),
      (171, ), (235, ), (61, ), (180, ), (354, ), (299, ), (125, ),
      (244, ), (70, ), (363, ), (308, ), (134, ), (253, ), (372, ), (189, ), (317, ), (262, ),
      (256, 271, 275), (27, ), (91, ), (155, ), (100, ), (45, ), (283, ), (109, ), (347, ), (173, ),
      (292, )})
]


class TestUtilText(unittest.TestCase):
    def test_process_content(self):
        for input_test, expected_output in TEST_CASES.items():
            output = process_content(input_test)
            self.assertEqual(output, expected_output)

    def test_process_content_with_terms_mapping(self):
        for input_test, expected_output in TEST_CASES.items():
            output = process_content(input_test, terms_mapping=TERMS_MAPPING)
            self.assertEqual(output, expected_output)

    def test_remove_subsets(self):
        sets = [[0, 1, 3], [0, 1], [2], [0, 3], [4]]
        output = {(0, 1, 3), (2, ), (4, )}
        self.assertEquals(remove_subsets(sets), output)

    def test_remove_similar_sets(self):
        for test in TEST_SET_CASES:
            print(test[0], test[1])
            self.assertEquals(remove_similar_subsets(test[0]), test[1])

    def test_get_top_words_spacy(self):
        sentences = ['Apple is looking at buying U.K. startup for $1 billion',
                     'Apple, located in Cupertino, buying startup in the U.K for billions']
        output = get_top_words_spacy(sentences)
        expected = [('Apple', 3), ('buying', 2), ('U.K. startup', 2), ('Cupertino', 1), ('the U.K', 1), ('billions', 1)]
        self.assertEquals(output, expected)
